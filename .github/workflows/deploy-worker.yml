name: Detect Changes and Deploy WORKER

on:
  push:
    branches:
      - main

jobs:
  detect-worker:
    runs-on: ubuntu-latest
    outputs:
      worker_changed: ${{ steps.detect-worker.outputs.worker_changed }}
      core_changed: ${{ steps.detect-worker.outputs.core_changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes in WORKER and Core and Domain
        id: detect-worker
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q 'worker/'; then
            echo "worker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "worker_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD^ HEAD | grep -q 'core/'; then
            echo "worker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "worker_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only HEAD^ HEAD | grep -q 'domain/'; then
            echo "worker_changed=true" >> $GITHUB_OUTPUT
          else
            echo "worker_changed=false" >> $GITHUB_OUTPUT
          fi

  deploy-worker:
    runs-on: ubuntu-latest
    needs: detect-worker
    if: ${{ needs.detect-worker.outputs.worker_changed == 'true' || needs.detect-worker.outputs.core_changed == 'true' }}
    env:
      AWS_REGION: ap-northeast-2
      ECR_REPOSITORY: alilm-worker/prod-repository
      ECS_SERVICE: alilm-worker-prod-ecs-service
      ECS_CLUSTER: alilm-prod-cluster
      ECS_TASK_DEFINITION: alilm-worker-task-prod-family-ec2
      CONTAINER_NAME: alilm-worker-prod-container
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Notify Slack - Deployment Started
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "🚀 WORKER server 배포가 시작되었습니다."}' $SLACK_WEBHOOK

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Firebase service key
        run: |
          mkdir -p core/src/main/resources/firebase
          echo ${{ secrets.FIREBASE_SECRET_KEY }} | base64 -d > core/src/main/resources/firebase/FirebaseSecretKey.json

      - name: Build with Gradle Wrapper
        run: ./gradlew :worker:build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: $AWS_REGION

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        id: build-image
        run: |
          IMAGE_TAG=${{ github.sha }}
          ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION --query "repositories[0].repositoryUri" --output text)
          docker build -t $ECR_URI:$IMAGE_TAG ./worker
          docker push $ECR_URI:$IMAGE_TAG
          echo "image=$ECR_URI:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: $ECS_TASK_DEFINITION
          container-name: $CONTAINER_NAME
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: $ECS_SERVICE
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true

      - name: Notify Slack - Deployment Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "✅ WORKER server 배포가 성공적으로 완료되었습니다!"}' $SLACK_WEBHOOK

      - name: Notify Slack - Deployment Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "❌ WORKER server 배포에 실패했습니다." }' $SLACK_WEBHOOK
