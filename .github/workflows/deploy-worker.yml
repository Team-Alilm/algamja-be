name: Deploy WORKER Server to Amazon ECS

on:
  workflow_run:
    workflows: ["Detect Changes and Build"]
    types:
      - completed

env:
  AWS_REGION: ap-northeast-2                   # AWS 리전 설정
  ECR_REPOSITORY: alilm-worker/prod-repository
  ECS_SERVICE: alilm-worker-prod-ecs-service    # Amazon ECS 서비스 이름
  ECS_CLUSTER: alilm-prod-cluster-ec2           # Amazon ECS 클러스터 이름
  ECS_TASK_DEFINITION: alilm-worker-task-prod-family-ec2  # AWS에서 관리하는 Task Definition 이름
  CONTAINER_NAME: alilm-worker-prod-container

jobs:
  deploy-worker:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Deploy WORKER Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Echo outputs
        run: |
          echo "API Changed: ${{ github.event.workflow_run.outputs.api_changed }}"
          echo "Worker Changed: ${{ github.event.workflow_run.outputs.worker_changed }}"
          echo "Proxy Changed: ${{ github.event.workflow_run.outputs.proxy_changed }}"

#      - name: Setup Java JDK
#        uses: actions/setup-java@v4.2.1
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v3.1.0
#
#      - name: Build with Gradle Wrapper
#        run: ./gradlew :worker:build
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ./worker
#          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#      - name: Update ECS service with new image
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ${{ env.ECS_TASK_DEFINITION }}
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true
