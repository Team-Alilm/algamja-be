name: Detect Changes and Deploy API

on:
  push:
    branches:
      - main  # 배포할 브랜치 설정

jobs:
  detect-api:
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.detect-api.outputs.api_changed }}
      core_changed: ${{ steps.detect-api.outputs.core_changed }}
      security_changed: ${{ steps.detect-api.outputs.security_changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 커밋 이력 가져오기

      - name: Detect changes in API server
        id: detect-api
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q 'api/'; then
            echo "API server has changed."
            echo "api_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in API server."
            echo "api_changed=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q 'core/'; then
            echo "Core module has changed."
            echo "core_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in core module."
            echo "core_changed=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q 'security/'; then
            echo "Security module has changed."
            echo "security_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in security module."
            echo "security_changed=false" >> $GITHUB_OUTPUT
          fi

  deploy-api:
    runs-on: ubuntu-latest
    needs: detect-api
    if: ${{ needs.detect-api.outputs.api_changed == 'true' || needs.detect-api.outputs.core_changed == 'true' || needs.detect-api.outputs.security_changed == 'true' }}
    name: deploy api server
    env:
      AWS_REGION: ap-northeast-2
      ECR_REPOSITORY: alilm-api/prod-repository
      ECS_SERVICE: alilm-api-prod-ecs-service
      ECS_CLUSTER: alilm-prod-cluster-ec2
      ECS_TASK_DEFINITION: alilm-api-task-prod-family-ec2
      CONTAINER_NAME: alilm-api-prod-container

    steps:
      - name: Notify Slack - Started
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "API 서버 배포가 시작되었습니다. Commit: ${{ github.sha }} Branch: ${{ github.ref }} :rocket:"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Firebase service key
        run: |
          mkdir -p core/src/main/resources/firebase
          echo ${{ secrets.FIREBASE_SECRET_KEY }} | base64 -d > core/src/main/resources/firebase/FirebaseSecretKey.json

      - name: Build with Gradle Wrapper
        run: ./gradlew :api:build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --no-cache -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ./api
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Verify ECS Service Deployment
        run: |
          aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].deployments'

      - name: Notify Slack - Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "API 서버 배포가 성공적으로 완료되었습니다! Commit: ${{ github.sha }} Branch: ${{ github.ref }} :white_check_mark:"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack - Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "API 서버 배포에 실패하였습니다. Commit: ${{ github.sha }} Branch: ${{ github.ref }} :x:"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
