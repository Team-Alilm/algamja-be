name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [ closed ]
    branches: [ "main" ]

# 같은 브랜치에서 여러 배포가 겹치면 이전 실행 취소
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    # push 또는 merged PR 에만 실행
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    env:
      IMAGE_TAG: ${{ github.sha }}
      # 리포지토리 경로를 전부 소문자로(OWNER/REPO → owner/repo)
      REPO: ghcr.io/${{ github.repository_owner}}/${{ github.event.repository.name}}
      HEALTH_URL: https://api.algamja.com/health-check

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Buildx 활성화 (docker-container 드라이버) → GHA 캐시 사용 가능
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REPO }}/app:${{ env.IMAGE_TAG }}
            ${{ env.REPO }}/app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # builder: ${{ steps.buildx.outputs.name }}  # (선택) 명시하고 싶으면 사용

      - name: Copy compose & nginx to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,nginx/**"
          target: "${{ secrets.EC2_APP_DIR }}"

      - name: Deploy on EC2 (pull → up -d, no 'down')
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.EC2_APP_DIR }}

            # 이번 커밋으로 이미지 태그 고정
            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" > .env

            # GHCR 로그인(일시 오류 대비 재시도)
            for i in 1 2 3; do
              docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} && break
              echo "docker login retry $i"; sleep 2
            done

            # 최신 이미지 받기 + 다운타임 최소화
            docker compose pull
            docker compose up -d
            docker compose ps

            # (선택) 디스크 정리
            docker system prune -af --volumes || true

      - name: Health check
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "Checking ${HEALTH_URL}"
            for i in $(seq 1 12); do
              code=$(curl -sk -o /dev/null -w "%{http_code}" "${HEALTH_URL}" || true)
              if [ "$code" = "200" ]; then
                echo "Health OK"
                exit 0
              fi
              echo "Waiting health... ($i/12) got $code"
              sleep 5
            done
            echo "Health check failed"
            exit 1

      - name: Rollback on failure (to latest)
        if: failure()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.EC2_APP_DIR }}
            echo "Rolling back to 'latest'..."
            echo "IMAGE_TAG=latest" > .env
            docker compose pull
            docker compose up -d
            docker compose ps