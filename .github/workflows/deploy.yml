name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  # PR이 닫힐 때(merge 포함)도 트리거하려면 아래 유지
  pull_request:
    types: [ closed ]

# 같은 브랜치에서 여러 배포가 겹치면 이전 실행 취소
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    # push 또는 merged PR 에만 실행
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    env:
      HEALTH_URL: https://api.algamja.com/health-check

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 소문자 경로를 고정으로 주입 (원하는 네이밍)
      - name: Compute env (lowercase repo, tag)
        run: |
          echo "REPO=ghcr.io/algamja/algamja-api" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      # GHCR 로그인: 타 namespace로 푸시해야 하므로 PAT 사용
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: algamja              # 타깃 네임스페이스 계정명/오너
          password: ${{ secrets.GHCR_PAT }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REPO }}/app:${{ env.IMAGE_TAG }}
            ${{ env.REPO }}/app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Copy compose & nginx to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,nginx/**"
          target: "${{ secrets.EC2_APP_DIR }}"

      - name: Deploy on EC2 (pull → up -d, no 'down')
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd "${{ secrets.EC2_APP_DIR }}"
            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" > .env
            
            # 타 namespace 로그인
            for i in 1 2 3; do
              docker login ghcr.io -u algamja -p ${{ secrets.GHCR_PAT }} && break
              echo "docker login retry $i"; sleep 2
            done
            
            docker compose pull
            docker compose up -d

      - name: Health check
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "Checking ${{ env.HEALTH_URL }}"
            for i in $(seq 1 12); do
              code=$(curl -sk -o /dev/null -w "%{http_code}" "${{ env.HEALTH_URL }}" || true)
              if [ "$code" = "200" ]; then
                echo "Health OK"; exit 0
              fi
              echo "Waiting health... ($i/12) got $code"; sleep 5
            done
            echo "Health check failed"; exit 1

      - name: Rollback on failure (to latest)
        if: failure()
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd "${{ secrets.EC2_APP_DIR }}"
            echo "Rolling back to 'latest'..."
            echo "IMAGE_TAG=latest" > .env

            FILE=docker-compose.yml
            [ -f compose.yaml ] && FILE=compose.yaml

            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} || true
            docker compose -f "$FILE" pull
            docker compose -f "$FILE" up -d
            docker compose -f "$FILE" ps