name: CI - Test and Code Quality

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

# 같은 PR에서 여러 CI가 겹치면 이전 실행 취소
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# dorny/test-reporter를 위한 권한 설정
permissions:
  contents: read
  actions: read
  checks: write

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create FirebaseSecretKey.json (for tests)
        run: |
          set -e
          mkdir -p src/main/resources/firebase
          echo "${{ secrets.FIREBASE_KEY_B64 }}" | base64 --decode > src/main/resources/firebase/FirebaseSecretKey.json
          # 빠른 검증: JSON 키의 대표 필드가 있는지 체크
          grep -q '"type": "service_account"' src/main/resources/firebase/FirebaseSecretKey.json
          echo "FirebaseSecretKey.json ready for tests."

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport --continue

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/test-results/test/*.xml
            build/reports/tests/test/
            build/reports/jacoco/test/

      - name: Generate test report
        uses: dorny/test-reporter@v1.9.1
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        with:
          name: 'Unit Test Results'
          path: 'build/test-results/test/*.xml'
          reporter: 'java-junit'
          fail-on-error: false # CI는 정보 제공이 목적, 실패해도 워크플로우 실패시키지 않음
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Detekt 정적 분석은 Kotlin 2.2.0 호환성 문제로 일시 비활성화
      # - name: Run detekt (Kotlin static analysis)  
      #   run: ./gradlew detekt --continue || echo "Detekt failed but continuing CI"

      # - name: Upload detekt results
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: detekt-results
      #     path: build/reports/detekt/

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create FirebaseSecretKey.json (for build)
        run: |
          set -e
          mkdir -p src/main/resources/firebase
          echo "${{ secrets.FIREBASE_KEY_B64 }}" | base64 --decode > src/main/resources/firebase/FirebaseSecretKey.json
          grep -q '"type": "service_account"' src/main/resources/firebase/FirebaseSecretKey.json
          echo "FirebaseSecretKey.json ready for build."

      - name: Build application
        run: ./gradlew build -x test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/